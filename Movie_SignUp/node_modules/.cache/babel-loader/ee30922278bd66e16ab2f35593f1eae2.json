{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/songjaehyeok/Desktop/github/react_Study/first/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Counter from './components/counter';\nimport MovieList from './components/movieList';\nimport MovieForm from './components/movieForm';\n\nfunction App() {\n  _s();\n\n  // 초반 영화리스트를 빈 배열로 만든다.\n  const [movies, setMovies] = useState([]); // 영화 삭제를 위한 함수\n  // filter -> map 과 비슷한 형식으로 모든 요소를 비교하여 true값만 리턴한다.\n  // filter를 이용하여 id가 일치하지 않는것을 찾아내어 true로 리턴시킨다.\n\n  const removeMovie = id => {\n    setMovies(movies.filter(movie => {\n      return movie.id !== id;\n    }));\n  }; // 영화의 수가 0이면 \"추가된 영화가 없습니다.\" 이고\n  // 그렇지 않으면 return 안에있는 JSX를 리턴한다.\n\n\n  const renderName = movies.length ? movies.map(movie => {\n    return (\n      /*#__PURE__*/\n      // MovieList 컴포넌트를 외부에서 가져온 후 props를 사용하여 정보를 내보낸다.\n      _jsxDEV(MovieList, {\n        movie: movie,\n        removeMovie: removeMovie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }, this)\n    );\n  }) : \"추가된 영화가 없습니다.\";\n\n  const updateMovie = movie => {\n    // setMovies 를 활용하여 movies의 배열에 추가한다.\n    setMovies([// ...movies 는 앞의 배열의 그대로 가져온다. (구조 분해 할당)\n    ...movies, movie]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Movie List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MovieForm, {\n      updateMovie: updateMovie\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), renderName]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"m6SRVq9N0POigGpMlnh/6woD7xI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/songjaehyeok/Desktop/github/react_Study/first/src/App.js"],"names":["React","useState","useEffect","Counter","MovieList","MovieForm","App","movies","setMovies","removeMovie","id","filter","movie","renderName","length","map","updateMovie"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CAFa,CAIb;AACA;AACA;;AACA,QAAMQ,WAAW,GAAIC,EAAD,IAAO;AACzBF,IAAAA,SAAS,CAACD,MAAM,CAACI,MAAP,CAAcC,KAAK,IAAG;AAC9B,aAAOA,KAAK,CAACF,EAAN,KAAaA,EAApB;AACD,KAFS,CAAD,CAAT;AAGD,GAJD,CAPa,CAab;AACA;;;AACA,QAAMG,UAAU,GAAGN,MAAM,CAACO,MAAP,GAAgBP,MAAM,CAACQ,GAAP,CAAWH,KAAK,IAAG;AACpD;AAAA;AACE;AACA,cAAC,SAAD;AACA,QAAA,KAAK,EAAEA,KADP;AAGA,QAAA,WAAW,EAAEH;AAHb,SAEKG,KAAK,CAACF,EAFX;AAAA;AAAA;AAAA;AAAA;AAFF;AAQD,GATkC,CAAhB,GASd,eATL;;AAYA,QAAMM,WAAW,GAAIJ,KAAD,IAAU;AAC5B;AACAJ,IAAAA,SAAS,CACP,CACE;AACA,OAAGD,MAFL,EAGEK,KAHF,CADO,CAAT;AAOD,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,SAAD;AAAW,MAAA,WAAW,EAAEI;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGH,UAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA9CQP,G;;KAAAA,G;AAgDT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Counter from './components/counter';\nimport MovieList from './components/movieList';\nimport MovieForm from './components/movieForm';\n\n\nfunction App() {\n  // 초반 영화리스트를 빈 배열로 만든다.\n  const [movies, setMovies] = useState([])\n\n  // 영화 삭제를 위한 함수\n  // filter -> map 과 비슷한 형식으로 모든 요소를 비교하여 true값만 리턴한다.\n  // filter를 이용하여 id가 일치하지 않는것을 찾아내어 true로 리턴시킨다.\n  const removeMovie = (id) =>{\n    setMovies(movies.filter(movie =>{\n      return movie.id !== id;\n    }))\n  };\n\n  // 영화의 수가 0이면 \"추가된 영화가 없습니다.\" 이고\n  // 그렇지 않으면 return 안에있는 JSX를 리턴한다.\n  const renderName = movies.length ? movies.map(movie =>{\n    return(\n      // MovieList 컴포넌트를 외부에서 가져온 후 props를 사용하여 정보를 내보낸다.\n      <MovieList\n      movie={movie}\n      key={movie.id}\n      removeMovie={removeMovie}\n      />\n    );\n  }) : \"추가된 영화가 없습니다.\"\n\n\n  const updateMovie = (movie) =>{\n    // setMovies 를 활용하여 movies의 배열에 추가한다.\n    setMovies(\n      [\n        // ...movies 는 앞의 배열의 그대로 가져온다. (구조 분해 할당)\n        ...movies,\n        movie\n      ]\n    );\n  }\n\n  return (\n    <div className=\"App\"> \n      <h1>Movie List</h1>\n      <MovieForm updateMovie={updateMovie}/>\n      {renderName}\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}